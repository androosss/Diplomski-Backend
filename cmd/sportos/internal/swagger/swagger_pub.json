{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Public API should be used by the public frontend that helps players to deposit and withdraw the funds. The API is secured. PAM auth token is expected.",
    "title": "TRI Pay public API",
    "license": {
      "name": "Fincore proprietary licence",
      "url": "http://fincore.com"
    },
    "version": "1"
  },
  "basePath": "/sportos/pub/v1/",
  "paths": {
    "/deposit": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Create deposit request",
        "operationId": "DepositCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "description": "Deposit request",
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DepositPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/deposits": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Get deposits by parameters",
        "operationId": "DepositsCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the payment request",
            "name": "paymentRequestId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "comma separated array of status values from PaymentRequestStatus. Comma separated is used since the query parameter is used.",
            "name": "statuses",
            "in": "query"
          },
          {
            "type": "string",
            "description": "created starting from or after the date. The format of the date is ‘YYYY-MM-DD’",
            "name": "createdFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "created before the date. The format of the date is ‘YYYY-MM-DD’",
            "name": "createdBefore",
            "in": "query"
          },
          {
            "type": "string",
            "description": "how many results should be skipped.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "max number of results to return. Default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Allow ascending and descending sorting over multiple fields. Example '+status,-ppAmount'. This returns a list sorted by descending manufacturers and ascending models. Default sort should be -createdAt.",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentRequest"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/payment-instruments": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Get payment instruments for player",
        "operationId": "PaymentInstrumentsCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Payment Instrument ID",
            "name": "paymentInstrumentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Payment Instrument Template ID",
            "name": "paymentInstrumentTemplateId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "sort",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentInstrument"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Create Payment instrument for player",
        "operationId": "PaymentInstrumentCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "description": "Payment Instrument",
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentInstrument"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentInstrument"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/payment-methods": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Returns payment methods available to the player",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Get payment methods (for player)",
        "operationId": "PaymentMethodsCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Payment request type",
            "name": "requestType",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/payment-requests/{id}/resume": {
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "or players when finishing deposit or withdrawal, to maybe finish if webhook is late",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "PaymentRequest resume flow",
        "operationId": "PaymentRequestPublicResumeController",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "PaymentRequest ID that is to be resumed",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/payment-routes": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Get payment routes for player",
        "operationId": "PaymentRoutesCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Payment Method ID",
            "name": "paymentMethod",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Request Type",
            "name": "requestType",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentRoute"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    },
    "/withdrawals": {
      "get": {
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Get withdrawals by parameters",
        "operationId": "WithdrawalsCollection",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "id of the payment request",
            "name": "paymentRequestId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "comma separated array of status values from PaymentRequestStatus. Comma separated is used since the query parameter is used.",
            "name": "statuses",
            "in": "query"
          },
          {
            "type": "string",
            "description": "created starting from or after the date. The format of the date is ‘YYYY-MM-DD’",
            "name": "createdFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "created before the date. The format of the date is ‘YYYY-MM-DD’",
            "name": "createdBefore",
            "in": "query"
          },
          {
            "type": "string",
            "description": "how many results should be skipped.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "max number of results to return. Default is 20.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Allow ascending and descending sorting over multiple fields. Example '+status,-ppAmount'. This returns a list sorted by descending manufacturers and ascending models. Default sort should be -createdAt.",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "results",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentRequest"
              }
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "bearer": []
          }
        ],
        "description": "Initiate withdrawal via available payment provider method",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Client API"
        ],
        "summary": "Create withdrawal request",
        "operationId": "WithdrawalCreate",
        "parameters": [
          {
            "type": "string",
            "description": "Unique request ID",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "description": "Withdrawal request",
            "name": "Request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WithdrawalPostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          },
          "400": {
            "description": "Invalid request supplied",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "401": {
            "description": "User or player isn't authorized",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "403": {
            "description": "Request is forbidden",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "404": {
            "description": "Predefined error occured",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "405": {
            "description": "Method not allowed error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "409": {
            "description": "Conflict error, payment provider error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "APIError": {
      "description": "Struct that is returned by API in case of error. Could be empty - all fields are optional",
      "type": "object",
      "title": "APIError",
      "properties": {
        "code": {
          "$ref": "#/definitions/PredefinedBusinessError"
        },
        "errors": {
          "description": "Errors can hold nested APIError",
          "type": "object"
        },
        "message": {
          "description": "Human friendly message",
          "type": "string"
        },
        "mnemonic": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64"
        },
        "payload": {
          "description": "Could contain any object of any type",
          "type": "object"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "CurrencyLimit": {
      "description": "Currency limits:",
      "type": "object",
      "title": "CurrencyLimit",
      "properties": {
        "currency": {
          "description": "ISO code",
          "type": "string"
        },
        "maxAmount": {
          "$ref": "#/definitions/Decimal"
        },
        "minAmount": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "Decimal": {
      "description": "number = value * 10 ^ exp",
      "type": "object",
      "title": "Decimal represents a fixed-point decimal. It is immutable."
    },
    "DepositPostRequest": {
      "description": "Initiate deposit via available payment instrument.",
      "type": "object",
      "title": "DepositPostRequest",
      "properties": {
        "amount": {
          "description": "Deposit amount in payment provider currency",
          "type": "string"
        },
        "currency": {
          "description": "ISO code for the payment provider currency",
          "type": "string"
        },
        "onApprove": {
          "$ref": "#/definitions/OnApprove"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "paymentRouteId": {
          "description": "TRI Pay payment route ID received with payment template",
          "type": "string"
        }
      }
    },
    "HateoasLink": {
      "description": "HateoasLink:",
      "type": "object",
      "title": "HateoasLink",
      "properties": {
        "href": {
          "description": "URL to the action",
          "type": "string"
        },
        "method": {
          "description": "HTTP method that should be used (GET, POST, PUT…)",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/HateoasRel"
        }
      }
    },
    "HateoasLinks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HateoasLink"
      }
    },
    "HateoasRel": {
      "description": "what type of action it is. Possible values:\n`approve` - payment request approval link at payment provider\n`self` - data about the payment request\n`resume` - resume of the payment request action\n`cancel` - cancel the payment request action\n`verify` - manual verification of the payment request\n`query` - query payment requests action",
      "type": "string",
      "title": "HateoasRel"
    },
    "Instruction": {
      "description": "Instruction explaining frontend what it should do",
      "type": "object",
      "title": "Instruction",
      "properties": {
        "description": {
          "description": "description of what is the instruction for",
          "type": "string"
        },
        "help": {
          "description": "helpful link",
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/UntypedConfig"
        },
        "rel": {
          "description": "instruction key",
          "type": "string"
        }
      }
    },
    "Instructions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Instruction"
      }
    },
    "OnApprove": {
      "type": "object",
      "properties": {
        "cancelUrl": {
          "type": "string"
        },
        "returnUrl": {
          "type": "string"
        },
        "returnUrlRequestIdParam": {
          "type": "string"
        }
      }
    },
    "PaymentInstrument": {
      "description": "Payment Instrument data",
      "type": "object",
      "title": "PaymentInstrument",
      "properties": {
        "createdAt": {
          "description": "System date and time when it has been created",
          "type": "string",
          "format": "date-time"
        },
        "paymentInstrumentId": {
          "description": "id in TRI Pay database",
          "type": "string"
        },
        "paymentInstrumentName": {
          "description": "Player or automatically defined payment instrument name.",
          "type": "string"
        },
        "paymentInstrumentTemplateId": {
          "description": "id of template used for presenting content of the form on the frontend",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PaymentInstrumentStatus"
        },
        "statusName": {
          "description": "Status name",
          "type": "string"
        },
        "values": {
          "description": "map of fields and values to be dynamically populated on frontend",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PaymentInstrumentField": {
      "description": "Fields description used by frontend on payment instrument form:",
      "type": "object",
      "title": "PaymentInstrumentField",
      "properties": {
        "format": {
          "$ref": "#/definitions/PaymentInstrumentFieldFormat"
        },
        "isMandatory": {
          "description": "defines if field should be mandatory for input on form",
          "type": "boolean"
        },
        "isSensitive": {
          "description": "defines if the field should be part of the form but its data should not be sent to the TRI Pay. Instead it may be used for the tokenization process by direct communication with the payment provider.",
          "type": "boolean"
        },
        "key": {
          "description": "unique field name",
          "type": "string"
        },
        "label": {
          "description": "default field label",
          "type": "string"
        },
        "type": {
          "description": "html input type",
          "type": "string"
        }
      }
    },
    "PaymentInstrumentFieldFormat": {
      "description": "Custom formatting rules that should be applied on the field. Useful for client validations. Examples: EMAIL, CARD_NUMBER.\n`EMAIL` - Regex: ^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}\n`CARD_NUMBER_VISA` - Regex: ^4[0-9]{12}(?:[0-9]{3})?$\n`CARD_NUMBER_MAESTRO` - Regex: ^(5018|5020|5038|6304|6759|6761|6763)[0-9]{8,15}$\n`CARD_NUMBER_MASTER` - Regex: ^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$",
      "type": "string",
      "title": "PaymentInstrumentFieldFormat"
    },
    "PaymentInstrumentStatus": {
      "description": "Partner fraud provider profile status. Possible values:\n`ACTIVE` - active payment instrument\n`TEMPORARY` - payment instrument is used for one transactions and shouldn't be saved\n`DISABLED` - disabled payment instrument",
      "type": "string",
      "title": "PaymentInstrumentStatus"
    },
    "PaymentMethod": {
      "description": "TRI Pay available methods\n`PAYPAL` - PayPal\n`BANK_CARD` - Bank Card\n`DUMMY` - Simple dummy payment method for testing purposes",
      "type": "string"
    },
    "PaymentProviderId": {
      "type": "string"
    },
    "PaymentRequest": {
      "description": "Payment Request data subset for players:",
      "type": "object",
      "title": "PaymentRequest",
      "properties": {
        "PaymentMethodName": {
          "description": "Payment method name",
          "type": "string"
        },
        "createdAt": {
          "description": "System date and time when it has been created",
          "type": "string",
          "format": "date-time"
        },
        "instructions": {
          "$ref": "#/definitions/Instructions"
        },
        "links": {
          "$ref": "#/definitions/HateoasLinks"
        },
        "paymentInstrumentId": {
          "description": "TRI Pay payment instrument ID used in request",
          "type": "string"
        },
        "paymentMethod": {
          "$ref": "#/definitions/PaymentMethod"
        },
        "paymentRequestId": {
          "description": "id in TRI Pay database",
          "type": "string"
        },
        "ppAmount": {
          "$ref": "#/definitions/Decimal"
        },
        "ppCurrency": {
          "description": "ISO code for the currency as it will be used at payment provider",
          "type": "string"
        },
        "requestType": {
          "$ref": "#/definitions/PaymentRequestType"
        },
        "requestTypeName": {
          "description": "Name of request type",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/PaymentRequestStatusExternal"
        },
        "statusName": {
          "description": "Name of status",
          "type": "string"
        },
        "updatedAt": {
          "description": "System date and time when it has been updated last time",
          "type": "string",
          "format": "date-time"
        },
        "wAmount": {
          "$ref": "#/definitions/Decimal"
        },
        "wCurrency": {
          "description": "ISO code for the player wallet default currency",
          "type": "string"
        }
      }
    },
    "PaymentRequestStatusExternal": {
      "description": "Payment requests external statuses that players may see. Possible values:\n`WAITING_FOR_APPROVAL`\n`PROCESSING`\n`COMPLETE`\n`DENIED`",
      "type": "string",
      "title": "PaymentRequestStatusExternal"
    },
    "PaymentRequestType": {
      "description": "TRI Pay payment request types. Possible values:\n`DEPOSIT` - End user deposits funds\n`WITHDRAWAL` - End user withdraws the funds",
      "type": "string",
      "title": "PaymentRequestType"
    },
    "PaymentRoute": {
      "description": "Payment Instrument Route data:",
      "type": "object",
      "title": "PaymentRoute",
      "properties": {
        "currencies": {
          "description": "available currencies and their calculated limits that the frontend may use for validations that can be used with this payment instrument.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CurrencyLimit"
          }
        },
        "instructions": {
          "$ref": "#/definitions/Instructions"
        },
        "paymentInstrumentFields": {
          "description": "array of input fields to be rendered on payment instrument form",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentField"
          }
        },
        "paymentInstrumentTemplateId": {
          "description": "id of template used for presenting content of the form on the frontend. If omitted, the payment instrument form is needless for the route.",
          "type": "string"
        },
        "paymentProvider": {
          "$ref": "#/definitions/PaymentProviderId"
        },
        "paymentProviderName": {
          "description": "payment provider name",
          "type": "string"
        },
        "paymentRouteId": {
          "description": "TRI Pay payment route ID",
          "type": "string"
        }
      }
    },
    "PredefinedBusinessError": {
      "description": "Predefined errors returned by business package. Possible error messages:\n'payment_request_status_change_forbiden_action' - payment request is in wrong status and status change is forbidden\n'payment_provider_no_record_of_approval' - payment request is not approved by player\n'payment_provider_place_order_error' - error when placing order (wrong start status or payment provider response status)\n'payment_provider_capture_funds_error' - error when capturing order (wrong payment provider response status)\n'payment_provider_authorize_funds_error' - error when authorizing order (wrong payment provider response status)\n'payment_provider_withdraw_funds_error' - withdrawal balance check failed\n'not_for_approval' - payment request not in READY_FOR_APPROVAL status when approving\n'payment_provider_unexpected_error' - unexpected response from payment provider\n'payment_provider_error' - error response from payment provider\n'mandatory_field_missing' - missing mandatory field in payment instrument values\n'payment_request_resume_not_possible' - wrong status or error in resume\n'payment_request_cancel_not_possible' - wrong status or error in cancel\n'payment_request_resume_forbidden' - player attempting to resume other players payment request\n'forbidden_value' - non existing enum sent from frontend\n'route_missing' - no route with active partner payment provider profile\n'route_instrument_mismatch' - payment route and payment instrument have payment instrument template id mismatch\n'disabled_payment_instrument' - disabled payment instrument detected\n'player_mismatch' - payment instrument player and player from context are not the same\n'limits_mismatch' - amount does not adhere to limits\n'limit_config_mismatch' - amount in config does not adhere to limits\n'unique_constraint' - entity may not be created due to its unique constraints\n'fraud_exception' - possible fraud exception\n'pam_initiate_exception' - exception during PAM initiate request\n'confirm_exception' - exception during PAM request confirmation method\n'failure_exception' - exception during PAM request failure method\n'sensitive_data_detected' - sensitive data passed with payment instrument\n'request_status_not_empty' - request status not empty\n'single_use_token_missing' - single use token missing when external vault is used\n'external_vault_expected' - external vault expected to be used\n'payment_request_verify_not_possible' - wrong status or error in verify\n'schedule_cancel_not_possible' - wrong status or error in cancel\n'bad_request_parametars' - wrong parametars received from body or URI",
      "type": "string",
      "title": "PredefinedBusinessError"
    },
    "Scenario": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "score": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UntypedConfig": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "WithdrawalPostRequest": {
      "description": "Initiate withdrawal via available payment instrument.",
      "type": "object",
      "title": "WithdrawalPostRequest",
      "properties": {
        "amount": {
          "description": "Withdrawal amount in payment provider currency",
          "type": "string"
        },
        "currency": {
          "description": "ISO code for the payment provider currency",
          "type": "string"
        },
        "onApprove": {
          "$ref": "#/definitions/OnApprove"
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrument"
        },
        "paymentRouteId": {
          "description": "TRI Pay payment route ID received with payment template",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}